scale_y_discrete(position="right") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major=element_blank()) +
ggtitle(paste0("School: ", s, ". Term: ", t)) +
scale_fill_distiller(limits=c(-1, 1), palette='RdBu', na.value='white',
name='Correlation') +
guides(fill=FALSE)
plt
for(s in schools) {
school_dt = fin_dt[school == s & Course.1 %in% courses & Course.2 %in% courses,,]
terms = unique(school_dt$term)
# For each term in that school
for(t in terms) {
term_dt = school_dt[term == t,,]
term_dt = term_dt[order(Course.2, Course.1),,]
# For each type of plot
for(p in plot_types){
m = matrix(term_dt[,get(p),], nrow = length(unique(term_dt$Course.1)))
m[upper.tri(m)] = NA
colnames(m) = term_dt[1:length(unique(term_dt$Course.1)), Course.1,]
rownames(m) = term_dt[1:length(unique(term_dt$Course.1)), Course.1,]
m_melt = melt(m)
# Plot it
plt = ggplot(m_melt, aes(Var1, Var2)) + geom_tile(aes(fill= value), color='white') +
theme_minimal() +
coord_fixed(ratio=1) +
scale_y_discrete(position="right") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major=element_blank()) +
ggtitle(paste0("School: ", s, ". Term: ", t)) +
scale_fill_distiller(limits=c(-1, 1), palette='RdBu', na.value='white',
name='Correlation') +
guides(fill=FALSE)
#       # if this is a correalation plot
#       if(grepl("r", p)) {
#         plt = plt + scale_fill_distiller(limits=c(-1, 1), palette='RdBu', na.value='white',
#                                        name='Correlation')
#       }
#       else{
# #        mx = max(term_dt[,get(p),])
#         plt = plt + scale_fill_distiller(limits=c(0,1), palette='RdBu', na.value='white',
#                                          name='P-Value')
#       }
l_plots[[paste0(s, "-", t)]] = plt
} # p for loop
} # term for loop
} # school for loop
grid.arrange(l_plots[[1]], l_plots[[3]], l_plots[[4]],
l_plots[[5]], l_plots[[6]], l_plots[[7]],
l_plots[[8]], l_plots[[9]], l_plots[[10]], nrow=3)
l_plots = list()
plot_types = c("p_value", "r")
# For each school
first = TRUE
school_dt = fin_dt[school == 524 & Course.1 %in% courses & Course.2 %in% courses,,]
term_dt = school_dt[term == 13792361748,,]
term_dt = term_dt[order(Course.2, Course.1),,]
m = matrix(term_dt[,get(p),], nrow = length(unique(term_dt$Course.1)))
m[upper.tri(m)] = NA
colnames(m) = term_dt[1:length(unique(term_dt$Course.1)), Course.1,]
rownames(m) = term_dt[1:length(unique(term_dt$Course.1)), Course.1,]
m_melt = melt(m)
plt = ggplot(m_melt, aes(Var1, Var2)) + geom_tile(aes(fill= value), color='white') +
theme_minimal() +
coord_fixed(ratio=1) +
scale_y_discrete(position="right") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major=element_blank(),
legend.position=c(0.05,0.95),
legend.justification=c(0,1)) +
ggtitle(paste0("School: ", s, ". Term: ", t)) +
scale_fill_distiller(limits=c(-1, 1), palette='RdBu', na.value='white',
name='Correlation')
l_plots[["First"]] = plt
for(s in schools) {
school_dt = fin_dt[school == s & Course.1 %in% courses & Course.2 %in% courses,,]
terms = unique(school_dt$term)
# For each term in that school
for(t in terms) {
term_dt = school_dt[term == t,,]
term_dt = term_dt[order(Course.2, Course.1),,]
# For each type of plot
for(p in plot_types){
m = matrix(term_dt[,get(p),], nrow = length(unique(term_dt$Course.1)))
m[upper.tri(m)] = NA
colnames(m) = term_dt[1:length(unique(term_dt$Course.1)), Course.1,]
rownames(m) = term_dt[1:length(unique(term_dt$Course.1)), Course.1,]
m_melt = melt(m)
# Plot it
plt = ggplot(m_melt, aes(Var1, Var2)) + geom_tile(aes(fill= value), color='white') +
theme_minimal() +
coord_fixed(ratio=1) +
scale_y_discrete(position="right") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major=element_blank()) +
ggtitle(paste0("School: ", s, ". Term: ", t)) +
scale_fill_distiller(limits=c(-1, 1), palette='RdBu', na.value='white',
name='Correlation') +
guides(fill=FALSE)
#       # if this is a correalation plot
#       if(grepl("r", p)) {
#         plt = plt + scale_fill_distiller(limits=c(-1, 1), palette='RdBu', na.value='white',
#                                        name='Correlation')
#       }
#       else{
# #        mx = max(term_dt[,get(p),])
#         plt = plt + scale_fill_distiller(limits=c(0,1), palette='RdBu', na.value='white',
#                                          name='P-Value')
#       }
l_plots[[paste0(s, "-", t)]] = plt
} # p for loop
} # term for loop
} # school for loop
grid.arrange(l_plots[[1]], l_plots[[3]], l_plots[[4]],
l_plots[[5]], l_plots[[6]], l_plots[[7]],
l_plots[[8]], l_plots[[9]], l_plots[[10]], nrow=3)
lay <- rbind(c(1,2,NA,NA),
c(3,4,5,NA),
c(6,7,8,9))
?grid.arrange
grid.arrange(l_plots[[1]], l_plots[[3]], l_plots[[4]],
l_plots[[5]], l_plots[[6]], l_plots[[7]],
l_plots[[8]], l_plots[[9]], l_plots[[10]], layout_matrix=lay)
lay <- rbind(c(NA,1,2,NA),
c(3,4,5),
c(6,7,8,9))
grid.arrange(l_plots[[1]], l_plots[[3]], l_plots[[4]],
l_plots[[5]], l_plots[[6]], l_plots[[7]],
l_plots[[8]], l_plots[[9]], l_plots[[10]], layout_matrix=lay)
lay <- rbind(c(NA,1,2,NA),
c(3,4,5, NA),
c(6,7,8,9))
grid.arrange(l_plots[[1]], l_plots[[3]], l_plots[[4]],
l_plots[[5]], l_plots[[6]], l_plots[[7]],
l_plots[[8]], l_plots[[9]], l_plots[[10]], layout_matrix=lay)
lay <- rbind(c(NA,1,2,NA),
c(3,3,4,5),
c(6,7,8,9))
grid.arrange(l_plots[[1]], l_plots[[3]], l_plots[[4]],
l_plots[[5]], l_plots[[6]], l_plots[[7]],
l_plots[[8]], l_plots[[9]], l_plots[[10]], layout_matrix=lay)
l_plots = list()
plot_types = c("p_value", "r")
# For each school
first = TRUE
school_dt = fin_dt[school == 524 & Course.1 %in% courses & Course.2 %in% courses,,]
term_dt = school_dt[term == 13792361748,,]
term_dt = term_dt[order(Course.2, Course.1),,]
m = matrix(term_dt[,get(p),], nrow = length(unique(term_dt$Course.1)))
m[upper.tri(m)] = NA
colnames(m) = term_dt[1:length(unique(term_dt$Course.1)), Course.1,]
rownames(m) = term_dt[1:length(unique(term_dt$Course.1)), Course.1,]
m_melt = melt(m)
plt = ggplot(m_melt, aes(Var1, Var2)) + geom_tile(aes(fill= value), color='white') +
theme_minimal() +
coord_fixed(ratio=1) +
scale_y_discrete(position="right") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major=element_blank(),
legend.position=c(0.05,0.95),
legend.justification=c(0,1)) +
ggtitle(paste0("School: ", 524, ". Term: ", 13792361748)) +
scale_fill_distiller(limits=c(-1, 1), palette='RdBu', na.value='white',
name='Correlation')
l_plots[["First"]] = plt
for(s in schools) {
school_dt = fin_dt[school == s & Course.1 %in% courses & Course.2 %in% courses,,]
terms = unique(school_dt$term)
# For each term in that school
for(t in terms) {
term_dt = school_dt[term == t,,]
term_dt = term_dt[order(Course.2, Course.1),,]
# For each type of plot
for(p in plot_types){
m = matrix(term_dt[,get(p),], nrow = length(unique(term_dt$Course.1)))
m[upper.tri(m)] = NA
colnames(m) = term_dt[1:length(unique(term_dt$Course.1)), Course.1,]
rownames(m) = term_dt[1:length(unique(term_dt$Course.1)), Course.1,]
m_melt = melt(m)
# Plot it
plt = ggplot(m_melt, aes(Var1, Var2)) + geom_tile(aes(fill= value), color='white') +
theme_minimal() +
coord_fixed(ratio=1) +
scale_y_discrete(position="right") +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major=element_blank()) +
ggtitle(paste0("School: ", s, ". Term: ", t)) +
scale_fill_distiller(limits=c(-1, 1), palette='RdBu', na.value='white',
name='Correlation') +
guides(fill=FALSE)
#       # if this is a correalation plot
#       if(grepl("r", p)) {
#         plt = plt + scale_fill_distiller(limits=c(-1, 1), palette='RdBu', na.value='white',
#                                        name='Correlation')
#       }
#       else{
# #        mx = max(term_dt[,get(p),])
#         plt = plt + scale_fill_distiller(limits=c(0,1), palette='RdBu', na.value='white',
#                                          name='P-Value')
#       }
l_plots[[paste0(s, "-", t)]] = plt
} # p for loop
} # term for loop
} # school for loop
lay <- rbind(c(NA,1,2,NA),
c(3,3,4,5),
c(6,7,8,9))
grid.arrange(l_plots[[1]], l_plots[[3]], l_plots[[4]],
l_plots[[5]], l_plots[[6]], l_plots[[7]],
l_plots[[8]], l_plots[[9]], l_plots[[10]], layout_matrix=lay)
head(school_dt)
s = school[Course.1 %in% courses & Course.2 %in% courses, .(school, term, Course.1, Course.2, p_value, r),]
s = school_dt[Course.1 %in% courses & Course.2 %in% courses, .(school, term, Course.1, Course.2, p_value, r),]
head(s)
sig_tests = school_dt[p_value >= .05,]
nrow(sig_tests)
nrow(s)
38/400
head(sig_tests)
View(sig_tests)
38/2
19/200
head(fin_dt)
head(fin_dt,2)
head(fin_dt,20)
2*45+3*45+4*45
nrow(fin_dt)
s = fin_dt[Course.1 %in% courses & Course.2 %in% courses, .(school, term, Course.1, Course.2, p_value, r),]
head(s)
s = copy(fin_dt[Course.1 %in% courses & Course.2 %in% courses, .(school, term, Course.1, Course.2, p_value, r),])
s[, comb := sort(paste0(tolower(Course.1),tolower(Course.2))),]
head(s)
s[1, comb := sort(paste0(tolower(Course.1),tolower(Course.2))),] -> g
g
s[, comb := sort(paste0(tolower(Course.1),tolower(Course.2))),]
head(s)
s[, comb := paste0(tolower(Course.1),tolower(Course.2)),]
head(s)
unique(s[, c("V1", "V2") := list(pmin(Course.1, Course.2),
pmax(Course.1, Course.2))], by = c("Course.1", "Course.2"))
un = unique(s[, c("V1", "V2") := list(pmin(Course.1, Course.2),
pmax(Course.1, Course.2))], by = c("Course.1", "Course.2"))
head(un)
un = un[Course.1 != Course.2,,]
head(un)
nrow(un)
un = unique(s[, c("V1", "V2") := list(pmin(Course.1, Course.2),
pmax(Course.1, Course.2))], by = term)
s = copy(fin_dt[Course.1 %in% courses & Course.2 %in% courses, .(school, term, Course.1, Course.2, p_value, r),])
un = unique(s[, c("V1", "V2") := list(pmin(Course.1, Course.2),
pmax(Course.1, Course.2))], by = term)
un = unique(s[, c("V1", "V2") := list(pmin(Course.1, Course.2),
pmax(Course.1, Course.2)), by = term], by = c("Course.1", "Course.2"))
un = un[Course.1 != Course.2,,]
head(un)
nrow(un)
s[,':='(V1 = gsub(" ", "", Course.1, fixed = TRUE),V2 = gsub(" ", "", Course.2, fixed = TRUE)),]
head(s)
s[,':='(V1 = tolower(V1),V2 = tolower(V2)),]
head(s)
s[, comb := paste0(V1, V2),]
head(s)
t = s[1, comb,]
t
sort(t)
sort(as.character(t))
sort(as.array(t))
t
t[2]
typeof(t)
class(t)
t = s[1, V1,]
t
sort(t)
tt = "dog"
sort(tt)
tt = "doga"
sort(tt)
strsplit(t, "")
s[, comb := paste(sort(unlist(strsplit(comb, ""))), collapse = "")]
head(s)
t
paste(sort(unlist(strsplit(t, ""))), collapse = "")
s[, comb := paste(sort(unlist(strsplit(comb, ""))), collapse = ""),]
s = copy(fin_dt[Course.1 %in% courses & Course.2 %in% courses, .(school, term, Course.1, Course.2, p_value, r),])
s[,':='(V1 = gsub(" ", "", Course.1, fixed = TRUE),V2 = gsub(" ", "", Course.2, fixed = TRUE)),]
s[,':='(V1 = tolower(V1),V2 = tolower(V2)),]
s[, comb := paste0(V1, V2),]
s[, comb := paste(sort(unlist(strsplit(comb, ""))), collapse = ""),]
s = copy(fin_dt[Course.1 %in% courses & Course.2 %in% courses, .(school, term, Course.1, Course.2, p_value, r),])
s[,':='(V1 = gsub(" ", "", Course.1, fixed = TRUE),V2 = gsub(" ", "", Course.2, fixed = TRUE)),]
s[,':='(V1 = tolower(V1),V2 = tolower(V2)),]
s[, comb := paste0(V1, V2),]
s[, comb := paste(sort(unlist(strsplit(comb, ""))), collapse = ""),]
head(s)
s = copy(fin_dt[Course.1 %in% courses & Course.2 %in% courses, .(school, term, Course.1, Course.2, p_value, r),])
s[,':='(V1 = gsub(" ", "", Course.1, fixed = TRUE),V2 = gsub(" ", "", Course.2, fixed = TRUE)),]
s[,':='(V1 = tolower(V1),V2 = tolower(V2)),]
s[, comb := paste0(V1, V2),]
head(s)
f = Vectorize(function(x) {paste(sort(unlist(strsplit(x, ""))), collapse = "")})
f("bbaadd", "good")
f(c("bbaadd", "good"))
s[, comb := paste(sort(unlist(strsplit(comb, ""))), collapse = ""),]
head(s)
s = copy(fin_dt[Course.1 %in% courses & Course.2 %in% courses, .(school, term, Course.1, Course.2, p_value, r),])
s[,':='(V1 = gsub(" ", "", Course.1, fixed = TRUE),V2 = gsub(" ", "", Course.2, fixed = TRUE)),]
s[,':='(V1 = tolower(V1),V2 = tolower(V2)),]
s[, comb := paste0(V1, V2),]
f = Vectorize(function(x) {paste(sort(unlist(strsplit(x, ""))), collapse = "")})
s[, comb := f(comb),]
head(s)
un = s[unique(comb),,by=term]
un = unique(s)
nrow(un)
head(un)
un = un[Course.1 != Course.2,,]
head(un)
head(un,20)
un = un[,.(school, term,p_value,r,comb),]
un = s[,.(school, term,p_value,r,comb),]
head(un)
un = s[Course.1 != Course.2,.(school, term,p_value,r,comb),]
head(un)
un = unique(un)
head(s)
un = merge(un, s, by = c("school", "term", "p_value", "r", "comb"))
head(un)
un = s[Course.1 != Course.2,]
un = unique(un[,.(school, term,p_value,r,comb),])
head(un)
un = s[Course.1 != Course.2,]
un = un[, head(.SD, 1), by = .(school, term, p_value, r, comb)]
head(un)
sig_tests = un[p_value >= .05,]
head(sig_test)
head(sig_tests)
nrow(sig_tests)
34/405
hist(sig_tests$ro)
hist(sig_tests$r)
hist(un$r)
View(sig_tests)
grid.arrange(l_plots[[1]], l_plots[[3]],nrow=1)
grid.arrange(l_plots[[4]],
l_plots[[5]], l_plots[[6]],nrow=1)
grid.arrange(l_plots[[7]],
l_plots[[8]], l_plots[[9]], l_plots[[10]],nrow=1)
grid.arrange(l_plots[[7]],
l_plots[[8]], l_plots[[9]], l_plots[[10]],nrow=2)
# Associations between schools
library(data.table)
source("Taylor/data_prep.R")
# First get the first term for each school
terms = data_sub[,t := unique(term_id)[1], by = institution_id]
terms = terms[, head(.SD, 1), by = institution_id]
data_term = data_sub[term_id %in% terms$t,,]
# Aggregate for each school and each subject
data_agg = data_term[, head(.SD,1), by=.(course_subject_EN, grade_value,c)]
data_agg = data_agg[, .(institution_id, course_subject_EN, grade_value, c),]
data_agg = data_agg[, ':='(grade_value = as.numeric(grade_value),
c = as.numeric(c))]
# Fill in the missing grades
full = expand.grid(unique(data_agg$course_subject_EN), c(1.00, 2.00, 3.00, 4.00, 5.00))
full = data.table(course_subject_EN = full$Var1, grade_value = full$Var2)
full_nofail = expand.grid(unique(data_agg$course_subject_EN), c(3.00, 4.00, 5.00))
full_nofail = data.table(course_subject_EN = full_nofail$Var1, grade_value = full_nofail$Var2)
schools = unique(data$institution_id)
data_fin = data.table()
data_nofail = data.table()
for(s in schools) {
temp = data_agg[institution_id == s,,]
temp_fail = merge(full, temp, by = c("course_subject_EN", "grade_value"), all.x=TRUE)
temp_nofail = merge(full_nofail, temp, by = c("course_subject_EN", "grade_value"), all.x=TRUE)
temp_fail[is.na(institution_id), institution_id := s,]
temp_nofail[is.na(institution_id), institution_id := s,]
data_fin = rbind(data_fin,temp_fail)
data_nofail = rbind(data_nofail, temp_nofail)
}
data_fin[is.na(c), c := 0,]
data_nofail[is.na(c), c:=0,]
data_nofail = data_nofail[grade_value >= 3,,]
setkey(data_fin, institution_id, course_subject_EN)
# Now we have full grade records for all common courses for each school.
# Test for homogeniety
##############################
# Disregard the ordinal nature of the grades
# Just do test for independence
##############################
# CMH test for all subjects
tabs = xtabs(c ~ grade_value + institution_id + course_subject_EN, data=data_fin)
mantelhaen.test(tabs)
# Do it for non failing grades... still get a p-value of 0.
tabs = xtabs(c ~ grade_value + institution_id + course_subject_EN, data=data_nofail)
mantelhaen.test(tabs)
tabs
tabs_dt = as.data.frame.table(tabs)
head(tabs_dt)
ggplot(tabs_dt, aes(grade_value, Freq, color=institution_id)) + geom_density(alpha=.6) +
facet_grid(.~course_subject_EN)
tabs = xtabs(c ~ grade_value + institution_id + course_subject_EN, data=data_fin)
tabs_dt = as.data.frame.table(tabs)
head(tabs_dt)
ggplot(tabs_dt, aes(as.numeric(grade_value), Freq, color=institution_id)) + geom_density(alpha=.6) +
facet_grid(.~course_subject_EN, nrow=3)
ggplot(tabs_dt, aes(as.numeric(grade_value), Freq, color=institution_id)) + geom_density(alpha=.6) +
facet_grid(.~course_subject_EN)
ggplot(tabs_dt, aes(as.numeric(grade_value), Freq, color=institution_id)) + geom_histogram(alpha=.6) +
facet_grid(.~course_subject_EN)
tabs_dt = expand.grid(tabs_dt)
ggplot(tabs_dt, aes(as.numeric(grade_value), Freq, fill=institution_id)) + geom_density(alpha=.6) +
facet_grid(.~course_subject_EN)
ggplot(tabs_dt, aes(grade_value, Freq, fill=institution_id)) + geom_density(alpha=.6) +
facet_grid(.~course_subject_EN)
tabs_dt$grade_value = as.numeric(tabs_dt$grade_value)
head(tabs_dt)
ggplot(tabs_dt, aes(grade_value, Freq, fill=institution_id)) + geom_density(alpha=.6) +
facet_grid(.~course_subject_EN)
ggplot(tabs_dt, aes(grade_value, Freq, fill=institution_id)) + geom_density(alpha=.6, stat="identity") +
facet_grid(.~course_subject_EN)
ggplot(tabs_dt, aes(grade_value, Freq, fill=institution_id)) + geom_density(alpha=.3, stat="identity") +
facet_wrap(.~course_subject_EN, 2)
ggplot(tabs_dt, aes(grade_value, Freq, fill=institution_id)) + geom_density(alpha=.3, stat="identity") +
facet_wrap(.~course_subject_EN, ncol=2)
ggplot(tabs_dt, aes(grade_value, Freq, fill=institution_id)) + geom_density(alpha=.3, stat="identity") +
facet_wrap(~course_subject_EN, ncol=2)
ggplot(tabs_dt, aes(grade_value, Freq, fill=institution_id)) + geom_density(alpha=.4, stat="identity") +
facet_wrap(~course_subject_EN, ncol=2) +
theme(legend.position = "top") + scale_fill_brewer(palette = "Set1")
ggplot(tabs_dt, aes(grade_value, Freq, fill=institution_id)) + geom_density(alpha=.3, stat="identity") +
facet_wrap(~course_subject_EN, ncol=2) +
theme(legend.position = "top") + scale_fill_brewer(palette = "Accent")
ggplot(tabs_dt, aes(grade_value, Freq, fill=institution_id)) + geom_density(alpha=.5, stat="identity") +
facet_wrap(~course_subject_EN, ncol=2) +
theme(legend.position = "top") + scale_fill_brewer(palette = "Accent")
ggplot(tabs_dt, aes(grade_value, Freq, fill=institution_id)) + geom_density(alpha=.5, stat="identity") +
facet_wrap(~course_subject_EN, ncol=2) +
theme(legend.position = "top") + scale_fill_brewer(palette = "Set1")
ggplot(tabs_dt, aes(grade_value, Freq, fill=institution_id)) + geom_density(alpha=.5, stat="identity") +
facet_wrap(~course_subject_EN, ncol=2) + ylab("Frequency") + xlab("Grade Value")
theme(legend.position = "top") + scale_fill_brewer(palette = "Set1")
ggplot(tabs_dt, aes(grade_value, Freq, fill=institution_id)) + geom_density(alpha=.5, stat="identity") +
facet_wrap(~course_subject_EN, ncol=2) + ylab("Frequency") + xlab("Grade Value") +
theme(legend.position = "top")
#########################
# Plot these densities by school
#########################
tabs_dt = as.data.table.table(tabs)
tabs_dt = as.data.frame.table(tabs)
tabs_dt = as.data.table(tabs_dt)
tabs_dt$grade_value = as.numeric(tabs_dt$grade_value)
tabs_dt[, prop := Freq / sum(Freq), by = .(course_subject_EN, institution_id)]
ggplot(tabs_dt, aes(grade_value, prop, fill=institution_id)) + geom_density(alpha=.5, stat="identity") +
facet_wrap(~course_subject_EN, ncol=2) + ylab("Frequency") + xlab("Grade Value") +
theme(legend.position = "top")
ggplot(tabs_dt, aes(grade_value, prop, fill=institution_id)) + geom_density(alpha=.5, stat="identity") +
facet_wrap(~course_subject_EN, ncol=2) + ylab("Proportion") + xlab("Grade Value") +
theme(legend.position = "top")
ggplot(tabs_dt, aes(grade_value, prop, fill=institution_id)) + geom_density(alpha=.5, stat="identity") +
facet_wrap(~course_subject_EN, ncol=3) + ylab("Proportion") + xlab("Grade Value") +
theme(legend.position = "top")
ggplot(tabs_dt, aes(grade_value, prop, fill=institution_id)) + geom_density(alpha=.5, stat="identity") +
facet_wrap(~course_subject_EN, ncol=2) + ylab("Proportion") + xlab("Grade Value") +
theme(legend.position = "top")
# CMH test for all subjects
tabs = xtabs(c ~ grade_value + institution_id + course_subject_EN, data=data_fin)
mantelhaen.test(tabs)
library(MASS)
head(data_fin)
m = polr(grade_value ~ factor(institution_id) +factor(course_subject_EN), weights = c, data = data_fin)
?factor
m = polr(factor(grade_value, ordered = TRUE) ~ factor(institution_id) +factor(course_subject_EN), weights = c, data = data_fin)
m = polr(factor(grade_value, ordered = TRUE) ~ factor(institution_id)*factor(course_subject_EN), weights = c, data = data_fin)
summary(m)
m = polr(factor(grade_value, ordered = TRUE) ~ factor(institution_id)*factor(course_subject_EN), weights = c,
data = data_fin, Hess=TRUE)
summary(m)
ctable <- coef(summary(m))
ctable
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
2.797*(6.3/5)
2.797*(6.3/5) -> s
48 - s
48 + s
(47+51)/(88+97)
47/88
55/97
(47+51)/(88+97) -> p
55/97->p2
47/88->p1
(p1-p2)/(sqrt(p*(1-p)(1/88+1/97)))
p
(p1-p2)/(sqrt(p*(1-p)*(1/88+1/97)))
51/97->p2
(p1-p2)/(sqrt(p*(1-p)*(1/88+1/97)))
p2
-.842*5+95
